@page "/report"

@using ReportViewerWebsite.Data
@using ValueType = Syncfusion.Blazor.Charts.ValueType
@inject IReportService ReportService



@if (dataItems == null)
{
	<h1>Report</h1>
	<p><em>Loading...</em></p>
}
else
{
    <div style="z-index:0">
        <h1>Report</h1>

    <SfUploader @ref="uploader" AutoUpload="false" Multiple="false">
        <UploaderButtonsProps Browse="Select Report" Upload="Upload Report"></UploaderButtonsProps>
        <UploaderEvents ValueChange="OnChange"></UploaderEvents>
    </SfUploader>

    <div style="min-height:25vh">
	<SfChart @ref="reportChart" Title="Paving Report" Width="100%">
        <ChartEvents Loaded="@OnChartLoaded" OnScrollEnd="@ScrollEndHandler"></ChartEvents>

        <ChartPrimaryXAxis ValueType="ValueType.Double" 
						   Interval="10" 
						   Minimum="@minChainage" 
						   Maximum="@maxChainage" 
						   EnableScrollbarOnZooming="true">
			@* <ChartAxisScrollbarSettings></ChartAxisScrollbarSettings> *@
            <ChartAxisMajorGridLines Width="1"></ChartAxisMajorGridLines>
        </ChartPrimaryXAxis>

        <ChartAxes>
            <ChartAxis Name="YTemperature"                           
					   LabelFormat="{value}Â°C"                           
					   ValueType="ValueType.Double">

            </ChartAxis>
            <ChartAxis Name="YSpeed"
                       LabelFormat="{value} m/m"					                              
					   ValueType="ValueType.Double"                           
					   OpposedPosition="true"                           
					   Minimum="0"                           
					   Maximum="10">

            </ChartAxis>
        </ChartAxes>

        <ChartCrosshairSettings Enable="true" LineType="LineType.Vertical"></ChartCrosshairSettings>

        <ChartTooltipSettings Enable="true" Shared="true" Format="${point.y}"></ChartTooltipSettings>

        <ChartZoomSettings EnablePan="true"
						   EnableMouseWheelZooming="false"
						   EnablePinchZooming="false"
						   EnableScrollbar="true"
						   EnableSelectionZooming="false"
						   Mode="ZoomMode.X">
		</ChartZoomSettings>

            <ChartSeriesCollection>
                <ChartSeries DataSource="@dataItems" Name="Temperature" YAxisName="YTemperature" XName="Chainage" YName="Temperature" Type="ChartSeriesType.Spline">
                    <ChartMarker Visible="true" Width="8" Height="8"></ChartMarker>
                </ChartSeries>

                <ChartSeries DataSource="@dataItems" Name="Speed" YAxisName="YSpeed" XName="Chainage" YName="Speed" Type="ChartSeriesType.Spline">
                    <ChartMarker Visible="true" Width="8" Height="8"></ChartMarker>
                </ChartSeries>
            </ChartSeriesCollection>
        </SfChart>
    </div>

    <div class="col-12 offset-0 col-sm-12 offset-sm-0 col-md-8 offset-md-2">
        
        <SfGrid DataSource="@dataItems" Width="100%">
            <GridColumns>
                <GridColumn Field=@nameof(ReportEntry.Chainage) HeaderText="Chainage" TextAlign="TextAlign.Center" Width="33%"></GridColumn>
                <GridColumn Field=@nameof(ReportEntry.Temperature) HeaderText="Temperature" TextAlign="TextAlign.Center" Width="33%"></GridColumn>
                <GridColumn Field=@nameof(ReportEntry.Speed) HeaderText="Speed" TextAlign="TextAlign.Center" Type="ColumnType.Number" Format="N1" Width="33%"></GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
    </div>
   
    <style>
        .e-chart {
            height: inherit;
        }

    </style>

}

@code {
	private ReportEntry[] dataItems;
	private SfChart reportChart;
    private SfUploader uploader;
    //private ElementReference emptyChart;

	private double minChainage, maxChainage;
	private bool updatedZoom;

    private void OnChartLoaded(ILoadedEventArgs args)
    {		
        @* if (maxChainage != default(double))
		{
			var ratio = 100.0 / (maxChainage - minChainage);
			args.Chart.PrimaryXAxis.ZoomFactor = ratio;
			args.Chart.PrimaryXAxis.ZoomPosition = 0;
		} *@
    }
 	public void ScrollEndHandler(IScrollEventArgs args)	
	{
		
	}
	 
	private void OnChange(UploadChangeEventArgs args)
	{
        var file = args.Files.FirstOrDefault();
		if (file != null)
		{
			dataItems = ReportService.Generate().ToArray();
			maxChainage = dataItems.Max(i => i.Chainage);
			minChainage = dataItems.Min(i => i.Chainage);
			updatedZoom = true;
			
			uploader.ClearAll();           
		}
	}

	protected override Task OnAfterRenderAsync(bool firstRender)
	{
		if (updatedZoom)
		{
			updatedZoom = false;
			var ratio = 100.0 / (maxChainage - minChainage);
			reportChart.PrimaryXAxis.ZoomFactor = ratio;
		}

		return Task.CompletedTask;
	}

	protected override Task OnInitializedAsync()
	{
		dataItems = ReportService.Generate().ToArray();
		maxChainage = dataItems.Max(i => i.Chainage);
		minChainage = dataItems.Min(i => i.Chainage);
		updatedZoom = true;

		return Task.CompletedTask;
	}
}
